// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TagProtectionInitParameters struct {

	// The pattern of the tag to protect.
	// The pattern of the tag to protect.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// Name of the repository to add the tag protection to.
	// Name of the repository to add the tag protection to.
	// +crossplane:generate:reference:type=github.com/xunholy/provider-github/apis/repo/v1alpha1.Repository
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// Reference to a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositoryRef *v1.Reference `json:"repositoryRef,omitempty" tf:"-"`

	// Selector for a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositorySelector *v1.Selector `json:"repositorySelector,omitempty" tf:"-"`
}

type TagProtectionObservation struct {

	// The ID of the tag protection.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The pattern of the tag to protect.
	// The pattern of the tag to protect.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// Name of the repository to add the tag protection to.
	// Name of the repository to add the tag protection to.
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// The ID of the tag protection.
	// The ID of the tag protection.
	TagProtectionID *float64 `json:"tagProtectionId,omitempty" tf:"tag_protection_id,omitempty"`
}

type TagProtectionParameters struct {

	// The pattern of the tag to protect.
	// The pattern of the tag to protect.
	// +kubebuilder:validation:Optional
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// Name of the repository to add the tag protection to.
	// Name of the repository to add the tag protection to.
	// +crossplane:generate:reference:type=github.com/xunholy/provider-github/apis/repo/v1alpha1.Repository
	// +kubebuilder:validation:Optional
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// Reference to a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositoryRef *v1.Reference `json:"repositoryRef,omitempty" tf:"-"`

	// Selector for a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositorySelector *v1.Selector `json:"repositorySelector,omitempty" tf:"-"`
}

// TagProtectionSpec defines the desired state of TagProtection
type TagProtectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TagProtectionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TagProtectionInitParameters `json:"initProvider,omitempty"`
}

// TagProtectionStatus defines the observed state of TagProtection.
type TagProtectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TagProtectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TagProtection is the Schema for the TagProtections API. Creates and manages repository tag protection within GitHub organizations or personal accounts
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,github}
type TagProtection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.pattern) || (has(self.initProvider) && has(self.initProvider.pattern))",message="spec.forProvider.pattern is a required parameter"
	Spec   TagProtectionSpec   `json:"spec"`
	Status TagProtectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TagProtectionList contains a list of TagProtections
type TagProtectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TagProtection `json:"items"`
}

// Repository type metadata.
var (
	TagProtection_Kind             = "TagProtection"
	TagProtection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TagProtection_Kind}.String()
	TagProtection_KindAPIVersion   = TagProtection_Kind + "." + CRDGroupVersion.String()
	TagProtection_GroupVersionKind = CRDGroupVersion.WithKind(TagProtection_Kind)
)

func init() {
	SchemeBuilder.Register(&TagProtection{}, &TagProtectionList{})
}
