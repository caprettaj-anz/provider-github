// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RepositoryPermissionsAllowedActionsConfigInitParameters struct {

	// Whether GitHub-owned actions are allowed in the repository.
	// Whether GitHub-owned actions are allowed in the repository.
	GithubOwnedAllowed *bool `json:"githubOwnedAllowed,omitempty" tf:"github_owned_allowed,omitempty"`

	// Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, monalisa/octocat@, monalisa/octocat@v2, monalisa/."
	// Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, 'monalisa/octocat@', 'monalisa/octocat@v2', 'monalisa/'.
	// +listType=set
	PatternsAllowed []*string `json:"patternsAllowed,omitempty" tf:"patterns_allowed,omitempty"`

	// Whether actions in GitHub Marketplace from verified creators are allowed. Set to true to allow all GitHub Marketplace actions by verified creators.
	// Whether actions in GitHub Marketplace from verified creators are allowed. Set to 'true' to allow all GitHub Marketplace actions by verified creators.
	VerifiedAllowed *bool `json:"verifiedAllowed,omitempty" tf:"verified_allowed,omitempty"`
}

type RepositoryPermissionsAllowedActionsConfigObservation struct {

	// Whether GitHub-owned actions are allowed in the repository.
	// Whether GitHub-owned actions are allowed in the repository.
	GithubOwnedAllowed *bool `json:"githubOwnedAllowed,omitempty" tf:"github_owned_allowed,omitempty"`

	// Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, monalisa/octocat@, monalisa/octocat@v2, monalisa/."
	// Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, 'monalisa/octocat@', 'monalisa/octocat@v2', 'monalisa/'.
	// +listType=set
	PatternsAllowed []*string `json:"patternsAllowed,omitempty" tf:"patterns_allowed,omitempty"`

	// Whether actions in GitHub Marketplace from verified creators are allowed. Set to true to allow all GitHub Marketplace actions by verified creators.
	// Whether actions in GitHub Marketplace from verified creators are allowed. Set to 'true' to allow all GitHub Marketplace actions by verified creators.
	VerifiedAllowed *bool `json:"verifiedAllowed,omitempty" tf:"verified_allowed,omitempty"`
}

type RepositoryPermissionsAllowedActionsConfigParameters struct {

	// Whether GitHub-owned actions are allowed in the repository.
	// Whether GitHub-owned actions are allowed in the repository.
	// +kubebuilder:validation:Optional
	GithubOwnedAllowed *bool `json:"githubOwnedAllowed" tf:"github_owned_allowed,omitempty"`

	// Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, monalisa/octocat@, monalisa/octocat@v2, monalisa/."
	// Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, 'monalisa/octocat@', 'monalisa/octocat@v2', 'monalisa/'.
	// +kubebuilder:validation:Optional
	// +listType=set
	PatternsAllowed []*string `json:"patternsAllowed,omitempty" tf:"patterns_allowed,omitempty"`

	// Whether actions in GitHub Marketplace from verified creators are allowed. Set to true to allow all GitHub Marketplace actions by verified creators.
	// Whether actions in GitHub Marketplace from verified creators are allowed. Set to 'true' to allow all GitHub Marketplace actions by verified creators.
	// +kubebuilder:validation:Optional
	VerifiedAllowed *bool `json:"verifiedAllowed,omitempty" tf:"verified_allowed,omitempty"`
}

type RepositoryPermissionsInitParameters struct {

	// The permissions policy that controls the actions that are allowed to run. Can be one of: all, local_only, or selected.
	// The permissions policy that controls the actions that are allowed to run. Can be one of: 'all', 'local_only', or 'selected'.
	AllowedActions *string `json:"allowedActions,omitempty" tf:"allowed_actions,omitempty"`

	// Sets the actions that are allowed in an repository. Only available when allowed_actions = selected. See Allowed Actions Config below for details.
	// Sets the actions that are allowed in an repository. Only available when 'allowed_actions' = 'selected'.
	AllowedActionsConfig []RepositoryPermissionsAllowedActionsConfigInitParameters `json:"allowedActionsConfig,omitempty" tf:"allowed_actions_config,omitempty"`

	// Should GitHub actions be enabled on this repository?
	// Should GitHub actions be enabled on this repository.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The GitHub repository
	// The GitHub repository.
	// +crossplane:generate:reference:type=github.com/xunholy/provider-github/apis/repo/v1alpha1.Repository
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// Reference to a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositoryRef *v1.Reference `json:"repositoryRef,omitempty" tf:"-"`

	// Selector for a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositorySelector *v1.Selector `json:"repositorySelector,omitempty" tf:"-"`
}

type RepositoryPermissionsObservation struct {

	// The permissions policy that controls the actions that are allowed to run. Can be one of: all, local_only, or selected.
	// The permissions policy that controls the actions that are allowed to run. Can be one of: 'all', 'local_only', or 'selected'.
	AllowedActions *string `json:"allowedActions,omitempty" tf:"allowed_actions,omitempty"`

	// Sets the actions that are allowed in an repository. Only available when allowed_actions = selected. See Allowed Actions Config below for details.
	// Sets the actions that are allowed in an repository. Only available when 'allowed_actions' = 'selected'.
	AllowedActionsConfig []RepositoryPermissionsAllowedActionsConfigObservation `json:"allowedActionsConfig,omitempty" tf:"allowed_actions_config,omitempty"`

	// Should GitHub actions be enabled on this repository?
	// Should GitHub actions be enabled on this repository.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The GitHub repository
	// The GitHub repository.
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`
}

type RepositoryPermissionsParameters struct {

	// The permissions policy that controls the actions that are allowed to run. Can be one of: all, local_only, or selected.
	// The permissions policy that controls the actions that are allowed to run. Can be one of: 'all', 'local_only', or 'selected'.
	// +kubebuilder:validation:Optional
	AllowedActions *string `json:"allowedActions,omitempty" tf:"allowed_actions,omitempty"`

	// Sets the actions that are allowed in an repository. Only available when allowed_actions = selected. See Allowed Actions Config below for details.
	// Sets the actions that are allowed in an repository. Only available when 'allowed_actions' = 'selected'.
	// +kubebuilder:validation:Optional
	AllowedActionsConfig []RepositoryPermissionsAllowedActionsConfigParameters `json:"allowedActionsConfig,omitempty" tf:"allowed_actions_config,omitempty"`

	// Should GitHub actions be enabled on this repository?
	// Should GitHub actions be enabled on this repository.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The GitHub repository
	// The GitHub repository.
	// +crossplane:generate:reference:type=github.com/xunholy/provider-github/apis/repo/v1alpha1.Repository
	// +kubebuilder:validation:Optional
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`

	// Reference to a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositoryRef *v1.Reference `json:"repositoryRef,omitempty" tf:"-"`

	// Selector for a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	RepositorySelector *v1.Selector `json:"repositorySelector,omitempty" tf:"-"`
}

// RepositoryPermissionsSpec defines the desired state of RepositoryPermissions
type RepositoryPermissionsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RepositoryPermissionsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RepositoryPermissionsInitParameters `json:"initProvider,omitempty"`
}

// RepositoryPermissionsStatus defines the observed state of RepositoryPermissions.
type RepositoryPermissionsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RepositoryPermissionsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RepositoryPermissions is the Schema for the RepositoryPermissionss API. Enables and manages Actions permissions for a GitHub repository
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,github}
type RepositoryPermissions struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RepositoryPermissionsSpec   `json:"spec"`
	Status            RepositoryPermissionsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RepositoryPermissionsList contains a list of RepositoryPermissionss
type RepositoryPermissionsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RepositoryPermissions `json:"items"`
}

// Repository type metadata.
var (
	RepositoryPermissions_Kind             = "RepositoryPermissions"
	RepositoryPermissions_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RepositoryPermissions_Kind}.String()
	RepositoryPermissions_KindAPIVersion   = RepositoryPermissions_Kind + "." + CRDGroupVersion.String()
	RepositoryPermissions_GroupVersionKind = CRDGroupVersion.WithKind(RepositoryPermissions_Kind)
)

func init() {
	SchemeBuilder.Register(&RepositoryPermissions{}, &RepositoryPermissionsList{})
}
