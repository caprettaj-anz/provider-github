// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OrganizationVariableInitParameters struct {

	// An array of repository ids that can access the organization variable.
	// An array of repository ids that can access the organization variable.
	// +listType=set
	SelectedRepositoryIds []*float64 `json:"selectedRepositoryIds,omitempty" tf:"selected_repository_ids,omitempty"`

	// Value of the variable
	// Value of the variable.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// Name of the variable
	// Name of the variable.
	VariableName *string `json:"variableName,omitempty" tf:"variable_name,omitempty"`

	// Configures the access that repositories have to the organization variable.
	// Must be one of all, private, selected. selected_repository_ids is required if set to selected.
	// Configures the access that repositories have to the organization variable. Must be one of 'all', 'private', or 'selected'. 'selected_repository_ids' is required if set to 'selected'.
	Visibility *string `json:"visibility,omitempty" tf:"visibility,omitempty"`
}

type OrganizationVariableObservation struct {

	// Date of actions_variable creation.
	// Date of 'actions_variable' creation.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// An array of repository ids that can access the organization variable.
	// An array of repository ids that can access the organization variable.
	// +listType=set
	SelectedRepositoryIds []*float64 `json:"selectedRepositoryIds,omitempty" tf:"selected_repository_ids,omitempty"`

	// Date of actions_variable update.
	// Date of 'actions_variable' update.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// Value of the variable
	// Value of the variable.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// Name of the variable
	// Name of the variable.
	VariableName *string `json:"variableName,omitempty" tf:"variable_name,omitempty"`

	// Configures the access that repositories have to the organization variable.
	// Must be one of all, private, selected. selected_repository_ids is required if set to selected.
	// Configures the access that repositories have to the organization variable. Must be one of 'all', 'private', or 'selected'. 'selected_repository_ids' is required if set to 'selected'.
	Visibility *string `json:"visibility,omitempty" tf:"visibility,omitempty"`
}

type OrganizationVariableParameters struct {

	// An array of repository ids that can access the organization variable.
	// An array of repository ids that can access the organization variable.
	// +kubebuilder:validation:Optional
	// +listType=set
	SelectedRepositoryIds []*float64 `json:"selectedRepositoryIds,omitempty" tf:"selected_repository_ids,omitempty"`

	// Value of the variable
	// Value of the variable.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// Name of the variable
	// Name of the variable.
	// +kubebuilder:validation:Optional
	VariableName *string `json:"variableName,omitempty" tf:"variable_name,omitempty"`

	// Configures the access that repositories have to the organization variable.
	// Must be one of all, private, selected. selected_repository_ids is required if set to selected.
	// Configures the access that repositories have to the organization variable. Must be one of 'all', 'private', or 'selected'. 'selected_repository_ids' is required if set to 'selected'.
	// +kubebuilder:validation:Optional
	Visibility *string `json:"visibility,omitempty" tf:"visibility,omitempty"`
}

// OrganizationVariableSpec defines the desired state of OrganizationVariable
type OrganizationVariableSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrganizationVariableParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OrganizationVariableInitParameters `json:"initProvider,omitempty"`
}

// OrganizationVariableStatus defines the observed state of OrganizationVariable.
type OrganizationVariableStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrganizationVariableObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// OrganizationVariable is the Schema for the OrganizationVariables API. Creates and manages an Action variable within a GitHub organization
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,github}
type OrganizationVariable struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.value) || (has(self.initProvider) && has(self.initProvider.value))",message="spec.forProvider.value is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.variableName) || (has(self.initProvider) && has(self.initProvider.variableName))",message="spec.forProvider.variableName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.visibility) || (has(self.initProvider) && has(self.initProvider.visibility))",message="spec.forProvider.visibility is a required parameter"
	Spec   OrganizationVariableSpec   `json:"spec"`
	Status OrganizationVariableStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationVariableList contains a list of OrganizationVariables
type OrganizationVariableList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrganizationVariable `json:"items"`
}

// Repository type metadata.
var (
	OrganizationVariable_Kind             = "OrganizationVariable"
	OrganizationVariable_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrganizationVariable_Kind}.String()
	OrganizationVariable_KindAPIVersion   = OrganizationVariable_Kind + "." + CRDGroupVersion.String()
	OrganizationVariable_GroupVersionKind = CRDGroupVersion.WithKind(OrganizationVariable_Kind)
)

func init() {
	SchemeBuilder.Register(&OrganizationVariable{}, &OrganizationVariableList{})
}
